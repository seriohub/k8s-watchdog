pipeline {
    agent any

    environment {
        // Environment variables
        evGit_Source_Code = "https://github.com/seriohub/k8s-watchdog" //Source code repository
        evDocker_HUB = "${env.DEFAULT_DOCKER_REGISTRY}" //Default docker registry (Global environment variable setting)
        evDocker_Project = "${env.K8S_WATCHDOG_PNAME}"  //project name
        evDocker_HUB_Credentials = credentials('DEFAULT_DOCKER_CREDENTIALS') //Credential stored in Jenkins Credential for logging in the HUB
        evTarget="k8s-watchdog"
        evLatestTag = ""
        }
    stages {
        stage('Clone Git Repository') {
            steps {
                script {
                    // Clone the GitHub repository
                    checkout([$class: 'GitSCM', branches: [[name: '*/main']], userRemoteConfigs: [[url: evGit_Source_Code]]])

                    // Get the latest tag in the main branch
                    evLatestTag = sh(script: 'git describe --tags --abbrev=0', returnStdout: true).trim()

                    // Remove the "v" prefix if it exists
                    evLatestTag = evLatestTag.startsWith('v') ? evLatestTag.substring(1) : evLatestTag

                    echo "Latest Tag: ${evLatestTag}"

                    // Set the latest tag as an environment variable for later use
                    GIT_TAG = evLatestTag

                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                     // Path to your Dockerfile within the project directory
                    def dockerfilePath = 'docker/Dockerfile'
                    def dockerHubProject='$evDocker_Project/$evTarget'

                    // Build the Docker image, specifying the Dockerfile path
                    sh "docker build --target ${evTarget} -t ${dockerHubProject}:${GIT_TAG} -t ${dockerHubProject}:latest  -f ${dockerfilePath} ."
                }
            }
        }

        stage('Push Docker Image to Registry') {
            steps {
                script {

                    echo "Docker registry: ${evDocker_HUB}"
                    def pushTo=''
                    if (evDocker_HUB != null) {
                        if (evDocker_HUB != '' && !evDocker_HUB.contains('null')) {
                            pushTo='$evDocker_HUB'
                        }
                    }

                    sh 'echo $evDocker_HUB_Credentials_PSW | docker login -u $evDocker_HUB_Credentials_USR --password-stdin ${pushTo}'
                    def dockerImageName='$evDocker_Project/$evTarget'

                    if (evDocker_HUB != null) {
                        if (evDocker_HUB != '' && !evDocker_HUB.contains('null')) {
                            dockerImageName='$evDocker_HUB/$evDocker_Project/$evTarget'
                        }
                    }
                    echo "Docker push to:- ${dockerImageName} -"
                    sh "docker push ${dockerImageName}:${GIT_TAG}"
                    sh "docker push ${dockerImageName}:latest"
                    sh 'docker logout '

                }
            }
        }
    }
    post {
        always {
            script {

                def pipelineName = currentBuild.fullProjectName
                def message

                if (currentBuild.resultIsBetterOrEqualTo('SUCCESS')) {
                    message = "Jenkins Pipeline ${pipelineName} : Your image version ${evLatestTag} has been successfully pushed to the Docker Registry"
                } else {
                    message = "Jenkins Pipeline ${pipelineName}: Build failed"
                }

                def url = "https://api.telegram.org/bot${env.TELEGRAM_TOKEN}/sendMessage"
                def payload = [
                    chat_id: "${env.TELEGRAM_CHAT_ID}",
                    text: message
                ]

                def response = httpRequest(
                    url: url,
                    httpMode: 'POST',
                    contentType: 'APPLICATION_JSON',
                    requestBody: groovy.json.JsonOutput.toJson(payload)
                )

                if (response.status == 200) {
                    echo "Telegram message sent successfully"
                } else {
                    error "Failed to send Telegram message. Status code: ${response.status}"
                }
            }
        }
    }
}
